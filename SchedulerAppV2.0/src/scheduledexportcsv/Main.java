/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scheduledexportcsv;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Timer;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author refly.maliangkay
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main1
     */
    public Main() {
        initComponents();

        // setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icon/lzd.png")));
        addComponentListener(new MyComponentListener());
        ((DefaultCaret) textareaResult.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        bg = textfieldExtractStart.getBackground();
        schedule = new Date();
        textfieldSchedule.setText(new SimpleDateFormat("EEEE, MMMM dd, yyyy").format(schedule));

        cardShow(CARD_LOGIN);

        getLoginInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        panelLogin = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        textfieldUsername = new javax.swing.JTextField();
        textfieldPassword = new javax.swing.JPasswordField();
        buttonLogin = new javax.swing.JButton();
        checkboxRememberme = new javax.swing.JCheckBox();
        panelData = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textfieldExtractStart = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textfieldExtractEnd = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textfieldQuery = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textfieldExportFolder = new javax.swing.JTextField();
        textfieldExportFilename = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textfieldSchedule = new javax.swing.JTextField();
        spinnerHour = new javax.swing.JSpinner();
        spinnerMinute = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        calendar = new scheduledexportcsv.JCalendar();
        jScrollPane3 = new javax.swing.JScrollPane();
        textareaResult = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuitemLogin = new javax.swing.JMenuItem();
        menuitemRun = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Data Extraction Tool");
        setMinimumSize(new java.awt.Dimension(1024, 512));
        setPreferredSize(new java.awt.Dimension(1024, 512));

        panelMain.setLayout(new java.awt.CardLayout());

        jLabel3.setText("Username");

        jLabel9.setText("Password");

        textfieldUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textfieldUsernameActionPerformed(evt);
            }
        });

        buttonLogin.setText("Login");
        buttonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoginActionPerformed(evt);
            }
        });

        checkboxRememberme.setSelected(true);
        checkboxRememberme.setText("Remember Me");

        javax.swing.GroupLayout panelLoginLayout = new javax.swing.GroupLayout(panelLogin);
        panelLogin.setLayout(panelLoginLayout);
        panelLoginLayout.setHorizontalGroup(
            panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelLoginLayout.createSequentialGroup()
                        .addComponent(checkboxRememberme)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLoginLayout.createSequentialGroup()
                        .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLoginLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18))
                            .addGroup(panelLoginLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(16, 16, 16)))
                        .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textfieldPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                            .addComponent(textfieldUsername))))
                .addContainerGap(822, Short.MAX_VALUE))
        );
        panelLoginLayout.setVerticalGroup(
            panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textfieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(textfieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonLogin)
                    .addComponent(checkboxRememberme))
                .addContainerGap(395, Short.MAX_VALUE))
        );

        panelMain.add(panelLogin, "cardLogin");

        panelData.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(350);
        jSplitPane1.setDividerSize(1);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane2.setBorder(null);
        jSplitPane2.setDividerLocation(620);
        jSplitPane2.setDividerSize(0);

        jScrollPane2.setBorder(null);
        jScrollPane2.setMinimumSize(new java.awt.Dimension(620, 275));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(620, 275));

        jPanel1.setMinimumSize(new java.awt.Dimension(520, 280));

        jLabel1.setText("Extract Start");

        textfieldExtractStart.setEditable(false);
        textfieldExtractStart.setMinimumSize(new java.awt.Dimension(180, 20));
        textfieldExtractStart.setPreferredSize(new java.awt.Dimension(180, 20));
        textfieldExtractStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldExtractStartMouseClicked(evt);
            }
        });

        jLabel2.setText("Extract End (D+1)");

        textfieldExtractEnd.setEditable(false);
        textfieldExtractEnd.setMinimumSize(new java.awt.Dimension(380, 20));
        textfieldExtractEnd.setPreferredSize(new java.awt.Dimension(380, 20));
        textfieldExtractEnd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldExtractEndMouseClicked(evt);
            }
        });

        jLabel4.setText("Query");

        textfieldQuery.setEditable(false);
        textfieldQuery.setBackground(new java.awt.Color(255, 255, 255));
        textfieldQuery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldQueryMouseClicked(evt);
            }
        });

        jLabel5.setText("Export Folder");

        textfieldExportFolder.setEditable(false);
        textfieldExportFolder.setBackground(new java.awt.Color(255, 255, 255));
        textfieldExportFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldExportFolderMouseClicked(evt);
            }
        });

        textfieldExportFilename.setEditable(false);
        textfieldExportFilename.setBackground(new java.awt.Color(255, 255, 255));
        textfieldExportFilename.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldExportFilenameMouseClicked(evt);
            }
        });

        jLabel6.setText("Export Filename");

        jLabel7.setText("Schedule");

        textfieldSchedule.setEditable(false);
        textfieldSchedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldScheduleMouseClicked(evt);
            }
        });

        spinnerHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        spinnerMinute.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        jLabel8.setText("Time");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textfieldExportFilename, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(0, 557, Short.MAX_VALUE))
                            .addComponent(textfieldQuery, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textfieldExtractStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textfieldExtractEnd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textfieldSchedule, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerHour, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(textfieldExportFolder, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textfieldExtractStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textfieldExtractEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textfieldSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(11, 11, 11)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textfieldQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textfieldExportFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textfieldExportFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        jSplitPane2.setLeftComponent(jScrollPane2);

        calendar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarPropertyChange(evt);
            }
        });
        jSplitPane2.setRightComponent(calendar);

        jSplitPane1.setTopComponent(jSplitPane2);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("log"));

        textareaResult.setBackground(new java.awt.Color(240, 240, 240));
        textareaResult.setColumns(20);
        textareaResult.setRows(5);
        jScrollPane3.setViewportView(textareaResult);

        jSplitPane1.setRightComponent(jScrollPane3);

        panelData.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        panelMain.add(panelData, "cardData");

        getContentPane().add(panelMain, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        menuitemLogin.setText("Login");
        menuitemLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemLoginActionPerformed(evt);
            }
        });
        jMenu1.add(menuitemLogin);

        menuitemRun.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuitemRun.setText("Run");
        menuitemRun.setEnabled(false);
        menuitemRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemRunActionPerformed(evt);
            }
        });
        jMenu1.add(menuitemRun);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void textfieldExtractStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldExtractStartMouseClicked
        // TODO add your handling code here:
        if (!COMPONENT_CLICKED_EXTRACT_START.equals(componentClicked)) {
            setComponentClicked(COMPONENT_CLICKED_EXTRACT_START);
        }
    }//GEN-LAST:event_textfieldExtractStartMouseClicked

    private void textfieldExtractEndMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldExtractEndMouseClicked
        // TODO add your handling code here:
        if (!COMPONENT_CLICKED_EXTRACT_END.equals(componentClicked)) {
            setComponentClicked(COMPONENT_CLICKED_EXTRACT_END);
        }
    }//GEN-LAST:event_textfieldExtractEndMouseClicked

    private void textfieldQueryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldQueryMouseClicked
        // TODO add your handling code here:
        /*if (!filePathChooser(FILEPATH_OPTION_IMPORT)) {
            complete = false;
        }*/
        filePathChooser(FILEPATH_OPTION_IMPORT);
    }//GEN-LAST:event_textfieldQueryMouseClicked

    private void textfieldExportFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldExportFolderMouseClicked
        // TODO add your handling code here:
        /*if (!filePathChooser(FILEPATH_OPTION_EXPORT)) {
            complete = false;
        }*/
        filePathChooser(FILEPATH_OPTION_EXPORT);
    }//GEN-LAST:event_textfieldExportFolderMouseClicked

    private void textfieldExportFilenameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldExportFilenameMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_textfieldExportFilenameMouseClicked

    private void textfieldScheduleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldScheduleMouseClicked
        // TODO add your handling code here:
        if (!COMPONENT_CLICKED_SCHEDULE.equals(componentClicked)) {
            setComponentClicked(COMPONENT_CLICKED_SCHEDULE);
        }
    }//GEN-LAST:event_textfieldScheduleMouseClicked

    private void calendarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarPropertyChange
        // TODO add your handling code here:
        setComponentClicked(COMPONENT_CLICKED_CALENDAR);
    }//GEN-LAST:event_calendarPropertyChange

    private void menuitemRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemRunActionPerformed
        // TODO add your handling code here:
        if (extractStart != null && extractEnd != null && !filepathQuery.isEmpty() && !filepathExport.isEmpty() && schedule != null) {
            DateFormat dateFormat = new SimpleDateFormat("EEEE, MMMM dd, yyyy HH:mm");

            extractStart.setHours(00);
            extractStart.setMinutes(00);
            extractEnd.setHours(00);
            extractEnd.setMinutes(00);
            schedule.setHours(Integer.valueOf(spinnerHour.getValue().toString()));
            schedule.setMinutes(Integer.valueOf(spinnerMinute.getValue().toString()));

            String msg = "Extract Start: " + dateFormat.format(extractStart) + "\n"
                    + "Extract End: " + dateFormat.format(extractEnd) + "\n"
                    + "Schedule: " + dateFormat.format(schedule) + "\n\n"
                    + "Proceed?";

            int optConfirm = JOptionPane.showConfirmDialog(this, msg, "Confirm", JOptionPane.OK_CANCEL_OPTION);

            if (optConfirm == JOptionPane.OK_OPTION) {
                setPanelDataEnabled(false);
                new File(filepathExport).mkdir();
                SchedulerDAO dao = new SchedulerDAO(extractStart, extractEnd, filepathQuery, username, password, filepathExport, filenameExport);
                dao.addPropertyChangeListener(new MyPropertyChangeListener());
                Timer timer = new Timer();
                timer.schedule(dao, schedule);
            }
        } else {
            textareaResult.append("Please complete all parameters!\n");
            JOptionPane.showMessageDialog(this, "Please complete all parameters!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_menuitemRunActionPerformed

    private void textfieldUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textfieldUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textfieldUsernameActionPerformed

    private void buttonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoginActionPerformed
        // TODO add your handling code here:
        username = textfieldUsername.getText();
        password = new String(textfieldPassword.getPassword());

        isRememberMe = checkboxRememberme.isSelected();

        LoginDAO dao = new LoginDAO(username, password, isRememberMe);
        dao.addPropertyChangeListener(new MyPropertyChangeListener());
        dao.login();
    }//GEN-LAST:event_buttonLoginActionPerformed

    private void menuitemLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemLoginActionPerformed
        // TODO add your handling code here:
        if (isLogin && currentCard.equals(CARD_DATA)) {
            cardShow(CARD_LOGIN);
            isLogin = false;
            menuitemLogin.setText("Login");
        } else if (isLogin && currentCard.equals(CARD_LOGIN)) {
            menuitemLogin.setText("Logout");
            isLogin = true;
        }

        setPanelDataEnabled(isLogin);
        menuitemRun.setEnabled(isLogin);
    }//GEN-LAST:event_menuitemLoginActionPerformed

    private void cardShow(String newCard) {
        CardLayout card = (CardLayout) panelMain.getLayout();
        card.show(panelMain, newCard);
        currentCard = newCard;
    }

    private void getLoginInfo() {
        LoginDAO loginDAO = new LoginDAO(username, password, isRememberMe);
        loginDAO.getAccess();
        this.username = loginDAO.getUsername();
        this.password = loginDAO.getPassword();

        textfieldUsername.setText(username);
        textfieldPassword.setText(password);
    }

    private boolean filePathChooser(int filepathOption) {
        boolean complete = true;

        JFileChooser chooser = new JFileChooser();
        int returnVal = 0;

        if (filepathOption == FILEPATH_OPTION_IMPORT) {
            chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("SQL File", "sql");
            chooser.setFileFilter(filter);
            returnVal = chooser.showDialog(this, "Select SQL");
        } else if (filepathOption == FILEPATH_OPTION_EXPORT) {
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            returnVal = chooser.showDialog(this, "Select Folder");
        }

        if (filepathOption == FILEPATH_OPTION_IMPORT && chooser.getSelectedFile().isDirectory()) {
            JOptionPane.showMessageDialog(panelData, "Please select SQL file only!");
        } else if (filepathOption == FILEPATH_OPTION_EXPORT && chooser.getSelectedFile().isFile()) {
            JOptionPane.showMessageDialog(panelData, "Please select folder only!");
        } else if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (filepathOption == FILEPATH_OPTION_IMPORT) {
                textfieldQuery.setText(chooser.getSelectedFile().getAbsolutePath());
                filepathQuery = chooser.getSelectedFile().getAbsolutePath();
                textareaResult.append("Query selected\n");
                showTextFieldFilepathToolTip(textfieldQuery, filepathQuery);

                filepathExport = FILEPATH_APP + "\\" + chooser.getSelectedFile().getName()
                        .substring(0, chooser.getSelectedFile().getName().lastIndexOf("."));
                textfieldExportFolder.setText(filepathExport);
                textareaResult.append("Export folder selected\n");
                showTextFieldFilepathToolTip(textfieldExportFolder, filepathExport);
            } else if (filepathOption == FILEPATH_OPTION_EXPORT) {
                textfieldExportFolder.setText(chooser.getSelectedFile().getAbsolutePath());
                filepathExport = chooser.getSelectedFile().getAbsolutePath();
                textareaResult.append("Export folder selected\n");
                showTextFieldFilepathToolTip(textfieldExportFolder, filepathExport);
            }
        }

        setFileNameExport();
        return complete;
    }

    private void showLabelIcon(JLabel label, String labelIcon) {
        label.setIcon(new ImageIcon(((ImageIcon) UIManager.getIcon(labelIcon)).
                getImage().getScaledInstance(label.getHeight(), label.getHeight(), Image.SCALE_SMOOTH)));
    }

    private void hideLabelIcon(JLabel label) {
        label.setIcon(null);
    }

    private void showTextFieldFilepathToolTip(JTextField textfield, String text) {
        if (text == null || text.trim().isEmpty()) {
            textfield.setToolTipText("");
        } else {
            textfield.setToolTipText(text);
        }
    }

    private void setComponentClicked(String componentName) {
        switch (componentName) {
            case COMPONENT_CLICKED_EXTRACT_START:
                componentClicked = COMPONENT_CLICKED_EXTRACT_START;
                textfieldExtractStart.setBackground(Color.white);
                textfieldExtractEnd.setBackground(bg);
                textfieldSchedule.setBackground(bg);
                break;
            case COMPONENT_CLICKED_EXTRACT_END:
                componentClicked = COMPONENT_CLICKED_EXTRACT_END;
                textfieldExtractEnd.setBackground(Color.WHITE);
                textfieldExtractStart.setBackground(bg);
                textfieldSchedule.setBackground(bg);
                break;
            case COMPONENT_CLICKED_SCHEDULE:
                componentClicked = COMPONENT_CLICKED_SCHEDULE;
                textfieldSchedule.setBackground(Color.WHITE);
                textfieldExtractStart.setBackground(bg);
                textfieldExtractEnd.setBackground(bg);
                break;
            case COMPONENT_CLICKED_CALENDAR:
                DateFormat dateFormat = new SimpleDateFormat("EEEE, MMMM dd, yyyy");

                if (componentClicked == null) {
                    componentClicked = COMPONENT_CLICKED_SCHEDULE;
                }

                switch (componentClicked) {
                    case COMPONENT_CLICKED_EXTRACT_START:
                        extractStart = calendar.getDate();
                        textfieldExtractStart.setText(dateFormat.format(extractStart));
                        textareaResult.append("Extract start selected: "
                                + dateFormat.format(extractStart) + "\n");
                        break;
                    case COMPONENT_CLICKED_EXTRACT_END:
                        extractEnd = calendar.getDate();
                        textfieldExtractEnd.setText(dateFormat.format(extractEnd));
                        textareaResult.append("Extract end (D+1) selected: "
                                + dateFormat.format(extractEnd) + "\n");
                        break;
                    case COMPONENT_CLICKED_SCHEDULE:
                        schedule = calendar.getDate();
                        textfieldSchedule.setText(dateFormat.format(schedule));
                        textareaResult.append("Schedule selected: "
                                + dateFormat.format(schedule) + "\n");
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
        setFileNameExport();
    }

    private void setFileNameExport() {
        if (extractStart != null && extractEnd != null && !filepathQuery.isEmpty()) {
            Calendar cal = Calendar.getInstance();
            cal.setTime(extractEnd);
            cal.add(Calendar.DATE, -1);

            filenameExport = filepathQuery.substring(filepathQuery.lastIndexOf("\\"),
                    filepathQuery.lastIndexOf(".")) + "_" + dateFormat(extractStart)
                    + "_" + dateFormat(cal.getTime());
            filenameExport = filenameExport.replace("\\", "");
            textfieldExportFilename.setText(filenameExport);
        }
    }

    private String dateFormat(Date date) {
        DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
        return dateFormat.format(date);
    }

    private void setPanelLoginEnabled(boolean status) {
        textfieldUsername.setEnabled(status);
        textfieldPassword.setEnabled(status);
        buttonLogin.setEnabled(status);
        menuitemLogin.setEnabled(status);
    }

    private void setPanelDataEnabled(boolean status) {
        textfieldExtractStart.setEnabled(status);
        textfieldExtractEnd.setEnabled(status);
        textfieldExportFolder.setEnabled(status);
        textfieldQuery.setEnabled(status);
    }

    class MyPropertyChangeListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent pce) {
            switch (pce.getPropertyName()) {
                case LoginDAO.LOGIN_STATUS:
                    switch ((int) pce.getNewValue()) {
                        case LoginDAO.STAT_START:
                            setPanelLoginEnabled(false);
                            menuitemRun.setEnabled(false);
                            setPanelDataEnabled(false);
                            break;
                        case LoginDAO.STAT_SUCCESS:
                            setPanelLoginEnabled(true);
                            menuitemRun.setEnabled(true);
                            setPanelDataEnabled(true);
                            isLogin = true;
                            menuitemLogin.setText("Logout");
                            cardShow(CARD_DATA);
                            break;
                        case LoginDAO.STAT_END:
                            setPanelLoginEnabled(true);
                            setPanelDataEnabled(true);
                            break;
                    }
                    break;
                case LoginDAO.LOGIN_MESSAGE:
                    JOptionPane.showMessageDialog(panelMain, pce.getNewValue().toString());
                    break;
                case SchedulerDAO.SCHEDULER_STATUS:
                    switch ((int) pce.getNewValue()) {
                        case SchedulerDAO.STAT_START:
                            menuitemRun.setEnabled(false);
                            setPanelDataEnabled(false);
                            break;
                        case SchedulerDAO.STAT_END:
                            menuitemRun.setEnabled(true);
                            setPanelDataEnabled(true);
                            break;
                    }
                    break;
                case SchedulerDAO.SCHEDULER_MESSAGE:
                    textareaResult.append(pce.getNewValue().toString() + "\n");
                    break;
            }
        }
    }

    class MyComponentListener implements ComponentListener {

        @Override
        public void componentResized(ComponentEvent ce) {
            jSplitPane1.setDividerLocation(0.7);
            jSplitPane2.setDividerLocation(0.7);
        }

        @Override
        public void componentMoved(ComponentEvent ce) {
        }

        @Override
        public void componentShown(ComponentEvent ce) {
        }

        @Override
        public void componentHidden(ComponentEvent ce) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonLogin;
    private scheduledexportcsv.JCalendar calendar;
    private javax.swing.JCheckBox checkboxRememberme;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JMenuItem menuitemLogin;
    private javax.swing.JMenuItem menuitemRun;
    private javax.swing.JPanel panelData;
    private javax.swing.JPanel panelLogin;
    private javax.swing.JPanel panelMain;
    private javax.swing.JSpinner spinnerHour;
    private javax.swing.JSpinner spinnerMinute;
    private javax.swing.JTextArea textareaResult;
    private javax.swing.JTextField textfieldExportFilename;
    private javax.swing.JTextField textfieldExportFolder;
    private javax.swing.JTextField textfieldExtractEnd;
    private javax.swing.JTextField textfieldExtractStart;
    private javax.swing.JPasswordField textfieldPassword;
    private javax.swing.JTextField textfieldQuery;
    private javax.swing.JTextField textfieldSchedule;
    private javax.swing.JTextField textfieldUsername;
    // End of variables declaration//GEN-END:variables
    private final int FILEPATH_OPTION_IMPORT = 1;
    private final int FILEPATH_OPTION_EXPORT = 2;

    private final String COMPONENT_CLICKED_EXTRACT_START = "EXTRACT_START";
    private final String COMPONENT_CLICKED_EXTRACT_END = "EXTRACT_END";
    private final String COMPONENT_CLICKED_SCHEDULE = "SCHEDULE";
    private final String COMPONENT_CLICKED_CALENDAR = "CALENDAR";
    private final String LABEL_ICON_WARNING = "OptionPane.warningIcon";
    private final String LABEL_ICON_ERROR = "OptionPane.errorIcon";

    private final String CARD_LOGIN = "cardLogin";
    private final String CARD_DATA = "cardData";
    private String currentCard = "";

    private final String FILEPATH_APP = new File("").getAbsolutePath();
    ;
    private String filepathQuery = "";
    private String filepathExport = "";
    private String filenameExport = "";
    private String componentClicked = "";

    private String username = "";
    private String password = "";
    private boolean isRememberMe = true;
    private boolean isLogin = false;

    Date extractStart;
    Date extractEnd;
    Date schedule;
    private Color bg;
}
