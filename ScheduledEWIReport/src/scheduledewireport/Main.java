/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scheduledewireport;

import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.Timer;

/**
 *
 * @author Refly IDFA
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        bg = jtfExtractStart.getBackground();
        outFile = "";
        jtfFilepath.setText(outFile);
        jpbProgress.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jclCalendar = new scheduledewireport.JCal();
        jLabel1 = new javax.swing.JLabel();
        jtfExtractStart = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfExtractEnd = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfScheduleDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jspScheduleHour = new javax.swing.JSpinner();
        jspScheduleMinute = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jtfFilepath = new javax.swing.JTextField();
        jbnStart = new javax.swing.JButton();
        jpbProgress = new javax.swing.JProgressBar();
        jtfProgressText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EWI Report Scheduler App");

        jclCalendar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jclCalendarPropertyChange(evt);
            }
        });

        jLabel1.setText("Extract Start");

        jtfExtractStart.setEditable(false);
        jtfExtractStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtfExtractStartMouseClicked(evt);
            }
        });

        jLabel2.setText("Extract End (H+1)");

        jtfExtractEnd.setEditable(false);
        jtfExtractEnd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtfExtractEndMouseClicked(evt);
            }
        });

        jLabel3.setText("Schedule");

        jtfScheduleDate.setEditable(false);
        jtfScheduleDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtfScheduleDateMouseClicked(evt);
            }
        });

        jLabel5.setText("Time");

        jspScheduleHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        jspScheduleHour.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jspScheduleHourPropertyChange(evt);
            }
        });

        jspScheduleMinute.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        jspScheduleMinute.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jspScheduleMinutePropertyChange(evt);
            }
        });

        jLabel4.setText("Export File Path");

        jtfFilepath.setEditable(false);
        jtfFilepath.setBackground(new java.awt.Color(255, 255, 255));
        jtfFilepath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtfFilepathMouseClicked(evt);
            }
        });

        jbnStart.setText("Start");
        jbnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbnStartActionPerformed(evt);
            }
        });

        jtfProgressText.setEditable(false);
        jtfProgressText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfProgressText.setBorder(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfExtractEnd, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addComponent(jtfExtractStart)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jtfScheduleDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jspScheduleHour, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jspScheduleMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jtfFilepath)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfProgressText, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jclCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jclCalendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfExtractStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfExtractEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfScheduleDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jspScheduleMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jspScheduleHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfFilepath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jpbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfProgressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 44, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jtfExtractStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfExtractStartMouseClicked
        // TODO add your handling code here:
        if (!"jtfExtractStart".equals(componentClicked)) {
            setComponentClicked("jtfExtractStart");
        }
    }//GEN-LAST:event_jtfExtractStartMouseClicked

    private void jtfExtractEndMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfExtractEndMouseClicked
        // TODO add your handling code here:
        if (!"jtfExtractEnd".equals(componentClicked)) {
            setComponentClicked("jtfExtractEnd");
        }
    }//GEN-LAST:event_jtfExtractEndMouseClicked

    private void jtfScheduleDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfScheduleDateMouseClicked
        // TODO add your handling code here:
        if (!"jtfSchedule".equals(componentClicked)) {
            setComponentClicked("jtfSchedule");
        }
    }//GEN-LAST:event_jtfScheduleDateMouseClicked

    private void jspScheduleHourPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jspScheduleHourPropertyChange
        // TODO add your handling code here:
        if (!"jtfSchedule".equals(componentClicked)) {
            setComponentClicked("jtfSchedule");
        }
    }//GEN-LAST:event_jspScheduleHourPropertyChange

    private void jspScheduleMinutePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jspScheduleMinutePropertyChange
        // TODO add your handling code here:
        if (!"jtfSchedule".equals(componentClicked)) {
            setComponentClicked("jtfSchedule");
        }
    }//GEN-LAST:event_jspScheduleMinutePropertyChange

    private void jclCalendarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jclCalendarPropertyChange
        // TODO add your handling code here:
        setComponentClicked("jclCalendar");
    }//GEN-LAST:event_jclCalendarPropertyChange

    private void jbnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbnStartActionPerformed
        // TODO add your handling code here:
        if (extractStart != null && extractEnd != null && schedule != null && !"".equals(outFile)) {
            DateFormat dateFormat = new SimpleDateFormat("EEEE, MMMM dd, yyyy HH:mm");

            extractStart.setHours(00);
            extractStart.setMinutes(00);
            extractEnd.setHours(00);
            extractEnd.setMinutes(00);
            schedule.setHours(Integer.valueOf(jspScheduleHour.getValue().toString()));
            schedule.setMinutes(Integer.valueOf(jspScheduleMinute.getValue().toString()));

            String msg = "Extract Start: " + dateFormat.format(extractStart) + "\n"
                    + "Extract End: " + dateFormat.format(extractEnd) + "\n"
                    + "Schedule: " + dateFormat.format(schedule) + "\n\n"
                    + "Proceed?";

            int optConfirm = JOptionPane.showConfirmDialog(this, msg, "Confirm", JOptionPane.OK_CANCEL_OPTION);

            if (optConfirm == JOptionPane.OK_OPTION) {
                EWIReportDAO ewiReportDao = new EWIReportDAO(extractStart, extractEnd, outFile);
                ewiReportDao.addPropertyChangeListener(new MyPropertyChangeListener());

                jpbProgress.setIndeterminate(true);
                jtfProgressText.setText("Waiting for scheduled time...");

                jtfExtractStart.setEnabled(false);
                jtfExtractEnd.setEnabled(false);
                jtfScheduleDate.setEnabled(false);
                jspScheduleHour.setEnabled(false);
                jspScheduleMinute.setEnabled(false);
                jtfFilepath.setEnabled(false);

                jpbProgress.setVisible(true);
                jbnStart.setEnabled(false);

                Timer timer = new Timer();

                timer.schedule(ewiReportDao, schedule);
            }
        } else {
            JOptionPane.showMessageDialog(this, "PLEASE COMPLETE ALL PARAMETERS!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbnStartActionPerformed

    private void jtfFilepathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfFilepathMouseClicked
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(outFile);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showDialog(this, "Select Folder");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            outFile = chooser.getSelectedFile().getAbsolutePath();
            jtfFilepath.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jtfFilepathMouseClicked

    private void setComponentClicked(String componentName) {
        switch (componentName) {
            case "jtfExtractStart":
                componentClicked = "jtfExtractStart";
                jtfExtractStart.setBackground(Color.white);

                jtfExtractEnd.setBackground(bg);
                jtfScheduleDate.setBackground(bg);
                jspScheduleHour.getEditor().getComponent(0).setBackground(bg);
                jspScheduleMinute.getEditor().getComponent(0).setBackground(bg);
                break;
            case "jtfExtractEnd":
                componentClicked = "jtfExtractEnd";
                jtfExtractEnd.setBackground(Color.WHITE);

                jtfExtractStart.setBackground(bg);
                jtfScheduleDate.setBackground(bg);
                jspScheduleHour.getEditor().getComponent(0).setBackground(bg);
                jspScheduleMinute.getEditor().getComponent(0).setBackground(bg);
                break;
            case "jtfSchedule":
                componentClicked = "jtfSchedule";
                jtfScheduleDate.setBackground(Color.WHITE);
                jspScheduleHour.getEditor().getComponent(0).setBackground(Color.WHITE);
                jspScheduleMinute.getEditor().getComponent(0).setBackground(Color.WHITE);

                jtfExtractStart.setBackground(bg);
                jtfExtractEnd.setBackground(bg);
                break;
            case "jclCalendar":
                DateFormat dateFormat = new SimpleDateFormat("EEEE, MMMM dd, yyyy");

                switch (componentClicked) {
                    case "jtfExtractStart":
                        extractStart = jclCalendar.getDate();
                        jtfExtractStart.setText(dateFormat.format(extractStart));
                        break;
                    case "jtfExtractEnd":
                        extractEnd = jclCalendar.getDate();
                        jtfExtractEnd.setText(dateFormat.format(extractEnd));
                        break;
                    case "jtfSchedule":
                        schedule = jclCalendar.getDate();
                        jtfScheduleDate.setText(dateFormat.format(schedule));
                        break;
                }
                break;
        }
    }

    class MyPropertyChangeListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent pce) {
            switch (pce.getPropertyName()) {
                case EWIReportDAO.PROPERTY_STATUS:
                    if (pce.getNewValue().equals(EWIReportDAO.STAT_INIT)) {
                        jpbProgress.setVisible(false);
                        jtfProgressText.setText("");

                        jtfExtractStart.setEnabled(true);
                        jtfExtractEnd.setEnabled(true);
                        jtfScheduleDate.setEnabled(true);
                        jspScheduleHour.setEnabled(true);
                        jspScheduleMinute.setEnabled(true);
                        jtfFilepath.setEnabled(true);

                        jbnStart.setEnabled(true);
                    } else if (pce.getNewValue().equals(EWIReportDAO.STAT_CONNECT_DB)) {
                        jtfProgressText.setText("Connecting database...");
                    } else if (pce.getNewValue().equals(EWIReportDAO.STAT_EXECUTE_QUERY)) {
                        jtfProgressText.setText("Executing query...");
                    } else if (pce.getNewValue().equals(EWIReportDAO.STAT_FETCH_RESULT)) {
                        jtfProgressText.setText("Fetching result...");
                    } else if (pce.getNewValue().equals(EWIReportDAO.STAT_DISCONNECT_DB)) {
                        jtfProgressText.setText("Disconnecting database...");
                    } else if (pce.getNewValue().equals(EWIReportDAO.STAT_CONVERT_XLSX)) {
                        jtfProgressText.setText("Converting to excel...");
                    } else if (pce.getNewValue().equals(EWIReportDAO.STAT_WRITE_XLSX)) {
                        jtfProgressText.setText("Writing to excel...");
                    } else if (pce.getNewValue().equals(EWIReportDAO.STAT_DONE)) {
                        jtfProgressText.setText("Done!");
                    }
                    break;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton jbnStart;
    private scheduledewireport.JCal jclCalendar;
    private javax.swing.JProgressBar jpbProgress;
    private javax.swing.JSpinner jspScheduleHour;
    private javax.swing.JSpinner jspScheduleMinute;
    private javax.swing.JTextField jtfExtractEnd;
    private javax.swing.JTextField jtfExtractStart;
    private javax.swing.JTextField jtfFilepath;
    private javax.swing.JTextField jtfProgressText;
    private javax.swing.JTextField jtfScheduleDate;
    // End of variables declaration//GEN-END:variables
    Color bg;
    String componentClicked;
    Date extractStart;
    Date extractEnd;
    Date schedule;
    String outFile;
}
