/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scheduledexportcsv;

import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Refly IDFA
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();

        progressbarStart.setVisible(false);
        labelStart.setVisible(false);

        bg = textfieldExtractStart.getBackground();
        outFile = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calendarChooser = new scheduledexportcsv.JCalendar();
        jLabel1 = new javax.swing.JLabel();
        textfieldExtractStart = new javax.swing.JTextField();
        textfieldExtractEnd = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textfieldSchedule = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        spinnerHour = new javax.swing.JSpinner();
        spinnerMinute = new javax.swing.JSpinner();
        textfieldExportFilepath = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        buttonStart = new javax.swing.JButton();
        progressbarStart = new javax.swing.JProgressBar();
        labelStart = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        calendarChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarChooserPropertyChange(evt);
            }
        });

        jLabel1.setText("Extract Start");

        textfieldExtractStart.setEditable(false);
        textfieldExtractStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldExtractStartMouseClicked(evt);
            }
        });

        textfieldExtractEnd.setEditable(false);
        textfieldExtractEnd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldExtractEndMouseClicked(evt);
            }
        });

        jLabel2.setText("Extract End (D+1)");

        textfieldSchedule.setEditable(false);
        textfieldSchedule.setBackground(new java.awt.Color(255, 255, 255));
        textfieldSchedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldScheduleMouseClicked(evt);
            }
        });

        jLabel3.setText("Schedule");

        jLabel4.setText("Time");

        spinnerHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        spinnerMinute.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        textfieldExportFilepath.setEditable(false);
        textfieldExportFilepath.setBackground(new java.awt.Color(255, 255, 255));
        textfieldExportFilepath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldExportFilepathMouseClicked(evt);
            }
        });

        jLabel5.setText("Export Filepath");

        buttonStart.setText("Start");
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        progressbarStart.setBorderPainted(false);

        labelStart.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelStart.setText("Progress");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textfieldExportFilepath)
                    .addComponent(textfieldExtractStart)
                    .addComponent(textfieldExtractEnd)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textfieldSchedule)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(progressbarStart, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(120, 120, 120)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calendarChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textfieldExtractStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textfieldExtractEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textfieldSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(spinnerHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textfieldExportFilepath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(progressbarStart, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelStart)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(calendarChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void textfieldExtractStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldExtractStartMouseClicked
        // TODO add your handling code here:
        if (!COMPONENT_CLICKED_EXTRACT_START.equals(componentClicked)) {
            setComponentClicked(COMPONENT_CLICKED_EXTRACT_START);
        }
    }//GEN-LAST:event_textfieldExtractStartMouseClicked

    private void textfieldExtractEndMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldExtractEndMouseClicked
        // TODO add your handling code here:
        if (!COMPONENT_CLICKED_EXTRACT_END.equals(componentClicked)) {
            setComponentClicked(COMPONENT_CLICKED_EXTRACT_END);
        }
    }//GEN-LAST:event_textfieldExtractEndMouseClicked

    private void textfieldScheduleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldScheduleMouseClicked
        // TODO add your handling code here:
        if (!COMPONENT_CLICKED_SCHEDULE.equals(componentClicked)) {
            setComponentClicked(COMPONENT_CLICKED_SCHEDULE);
        }
    }//GEN-LAST:event_textfieldScheduleMouseClicked

    private void textfieldExportFilepathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldExportFilepathMouseClicked
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(outFile);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showDialog(this, "Select Folder");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            outFile = chooser.getSelectedFile().getAbsolutePath();
            textfieldExportFilepath.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_textfieldExportFilepathMouseClicked

    private void calendarChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarChooserPropertyChange
        // TODO add your handling code here:
        setComponentClicked(COMPONENT_CLICKED_CALENDAR);
    }//GEN-LAST:event_calendarChooserPropertyChange

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        // TODO add your handling code here:
        if (extractStart != null && extractEnd != null && schedule != null && !"".equals(outFile)) {
            DateFormat dateFormat = new SimpleDateFormat("EEEE, MMMM dd, yyyy HH:mm");

            extractStart.setHours(00);
            extractStart.setMinutes(00);
            extractEnd.setHours(00);
            extractEnd.setMinutes(00);
            schedule.setHours(Integer.valueOf(spinnerHour.getValue().toString()));
            schedule.setMinutes(Integer.valueOf(spinnerMinute.getValue().toString()));

            String msg = "Extract Start: " + dateFormat.format(extractStart) + "\n"
                    + "Extract End: " + dateFormat.format(extractEnd) + "\n"
                    + "Schedule: " + dateFormat.format(schedule) + "\n\n"
                    + "Proceed?";

            int optConfirm = JOptionPane.showConfirmDialog(this, msg, "Confirm", JOptionPane.OK_CANCEL_OPTION);

            if (optConfirm == JOptionPane.OK_OPTION) {
                SchedulerDAO schedulerDAO = new SchedulerDAO(extractStart, extractEnd, outFile);
                schedulerDAO.addPropertyChangeListener(new MyPropertyChangeListener());

                progressbarStart.setIndeterminate(true);
                labelStart.setText("Waiting for scheduled time...");

                textfieldExtractStart.setEnabled(false);
                textfieldExtractEnd.setEnabled(false);
                textfieldSchedule.setEnabled(false);
                spinnerHour.setEnabled(false);
                spinnerMinute.setEnabled(false);
                textfieldExportFilepath.setEnabled(false);

                progressbarStart.setVisible(true);
                labelStart.setVisible(true);
                buttonStart.setEnabled(false);

                Timer timer = new Timer();

                timer.schedule(schedulerDAO, schedule);
            }
        } else {
            JOptionPane.showMessageDialog(this, "PLEASE COMPLETE ALL PARAMETERS!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buttonStartActionPerformed

    private void setComponentClicked(String componentName) {
        switch (componentName) {
            case COMPONENT_CLICKED_EXTRACT_START:
                componentClicked = COMPONENT_CLICKED_EXTRACT_START;
                textfieldExtractStart.setBackground(Color.white);
                textfieldExtractEnd.setBackground(bg);
                textfieldSchedule.setBackground(bg);
                break;
            case COMPONENT_CLICKED_EXTRACT_END:
                componentClicked = COMPONENT_CLICKED_EXTRACT_END;
                textfieldExtractEnd.setBackground(Color.WHITE);
                textfieldExtractStart.setBackground(bg);
                textfieldSchedule.setBackground(bg);
                break;
            case COMPONENT_CLICKED_SCHEDULE:
                componentClicked = COMPONENT_CLICKED_SCHEDULE;
                textfieldSchedule.setBackground(Color.WHITE);
                textfieldExtractStart.setBackground(bg);
                textfieldExtractEnd.setBackground(bg);
                break;
            case COMPONENT_CLICKED_CALENDAR:
                DateFormat dateFormat = new SimpleDateFormat("EEEE, MMMM dd, yyyy");

                if (componentClicked == null) {
                    componentClicked = COMPONENT_CLICKED_SCHEDULE;
                }

                switch (componentClicked) {
                    case COMPONENT_CLICKED_EXTRACT_START:
                        extractStart = calendarChooser.getDate();
                        textfieldExtractStart.setText(dateFormat.format(extractStart));
                        break;
                    case COMPONENT_CLICKED_EXTRACT_END:
                        extractEnd = calendarChooser.getDate();
                        textfieldExtractEnd.setText(dateFormat.format(extractEnd));
                        break;
                    case COMPONENT_CLICKED_SCHEDULE:
                        schedule = calendarChooser.getDate();
                        textfieldSchedule.setText(dateFormat.format(schedule));
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
    }

    class MyPropertyChangeListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent pce) {
            switch (pce.getPropertyName()) {
                case SchedulerDAO.PROPERTY_STATUS:
                    if (pce.getNewValue().equals(SchedulerDAO.STAT_INIT)) {
                        progressbarStart.setVisible(false);
                        labelStart.setVisible(false);

                        textfieldExtractStart.setEnabled(true);
                        textfieldExtractEnd.setEnabled(true);
                        textfieldSchedule.setEnabled(true);
                        textfieldExportFilepath.setEnabled(true);
                        spinnerHour.setEnabled(true);
                        spinnerMinute.setEnabled(true);
                        buttonStart.setEnabled(true);
                    } else if (pce.getNewValue().equals(SchedulerDAO.STAT_CONNECT_DB)) {
                        labelStart.setText("Connecting database...");
                    } else if (pce.getNewValue().equals(SchedulerDAO.STAT_EXECUTE_QUERY)) {
                        labelStart.setText("Executing query...");
                    } else if (pce.getNewValue().equals(SchedulerDAO.STAT_FETCH_RESULT)) {
                        labelStart.setText("Fetching result...");
                    } else if (pce.getNewValue().equals(SchedulerDAO.STAT_WRITE_XLSX)) {
                        labelStart.setText("Writing to excel...");
                    } else if (pce.getNewValue().equals(SchedulerDAO.STAT_DISCONNECT_DB)) {
                        labelStart.setText("Disconnecting database...");
                    } else if (pce.getNewValue().equals(SchedulerDAO.STAT_DB_ERROR)) {
                        labelStart.setText("Database error, please restart...");
                    } else if (pce.getNewValue().equals(SchedulerDAO.STAT_WRITE_ERROR)) {
                        labelStart.setText("Write error, please restart...");
                    } else if (pce.getNewValue().equals(SchedulerDAO.STAT_DONE)) {
                        labelStart.setText("Done!");
                    }
                    break;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonStart;
    private scheduledexportcsv.JCalendar calendarChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel labelStart;
    private javax.swing.JProgressBar progressbarStart;
    private javax.swing.JSpinner spinnerHour;
    private javax.swing.JSpinner spinnerMinute;
    private javax.swing.JTextField textfieldExportFilepath;
    private javax.swing.JTextField textfieldExtractEnd;
    private javax.swing.JTextField textfieldExtractStart;
    private javax.swing.JTextField textfieldSchedule;
    // End of variables declaration//GEN-END:variables

    private final String COMPONENT_CLICKED_EXTRACT_START = "EXTRACT_START";
    private final String COMPONENT_CLICKED_EXTRACT_END = "EXTRACT_END";
    private final String COMPONENT_CLICKED_SCHEDULE = "SCHEDULE";
    private final String COMPONENT_CLICKED_CALENDAR = "CALENDAR";

    Color bg;
    String componentClicked;
    Date extractStart;
    Date extractEnd;
    Date schedule;
    String outFile;
}
